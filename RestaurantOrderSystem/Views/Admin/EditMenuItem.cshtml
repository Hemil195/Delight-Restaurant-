@model RestaurantOrderSystem.Models.MenuItem

@{
    ViewBag.Title = "Edit Menu Item";
}

<div class="container mt-4">
    <h2><i class="fas fa-edit"></i> Edit Menu Item</h2>

    @using (Html.BeginForm("EditMenuItem", "Admin", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.ItemID)
        
        <div class="row">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-header">
                        <h5>Item Details</h5>
                    </div>
                    <div class="card-body">
                        @Html.ValidationSummary(true, "", new { @class = "alert alert-danger" })

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(model => model.Name, new { @class = "form-label" })
                                @Html.TextBoxFor(model => model.Name, new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "invalid-feedback" })
                            </div>
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(model => model.Price, new { @class = "form-label" })
                                <div class="input-group">
                                    <span class="input-group-text">$</span>
                                    @Html.TextBoxFor(model => model.Price, new { @class = "form-control", @type = "number", @step = "0.01", @min = "0.01", required = "required" })
                                </div>
                                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "invalid-feedback" })
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(model => model.CategoryID, "Category", new { @class = "form-label" })
                                @Html.DropDownListFor(model => model.CategoryID, (SelectList)ViewBag.Categories, "Select a category", new { @class = "form-select", required = "required" })
                                @Html.ValidationMessageFor(model => model.CategoryID, "", new { @class = "invalid-feedback" })
                            </div>
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(model => model.ImageUrl, new { @class = "form-label" })
                                @Html.TextBoxFor(model => model.ImageUrl, new { @class = "form-control", @placeholder = "https://example.com/image.jpg" })
                                @Html.ValidationMessageFor(model => model.ImageUrl, "", new { @class = "invalid-feedback" })
                            </div>
                        </div>

                        <div class="mb-3">
                            @Html.LabelFor(model => model.Description, new { @class = "form-label" })
                            @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @rows = "3", @placeholder = "Brief description of the menu item..." })
                            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "invalid-feedback" })
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <div class="form-check">
                                    @Html.CheckBoxFor(model => model.IsAvailable, new { @class = "form-check-input" })
                                    @Html.LabelFor(model => model.IsAvailable, "Available for ordering", new { @class = "form-check-label" })
                                </div>
                            </div>
                            <div class="col-md-6 mb-3">
                                <div class="form-check">
                                    @Html.CheckBoxFor(model => model.IsFeatured, new { @class = "form-check-input" })
                                    @Html.LabelFor(model => model.IsFeatured, "Featured item", new { @class = "form-check-label" })
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Preview</h5>
                    </div>
                    <div class="card-body">
                        <div class="card border-0">
                            @if (!string.IsNullOrEmpty(Model.ImageUrl))
                            {
                                <img src="@Model.ImageUrl" class="card-img-top" alt="@Model.Name" style="height: 150px; object-fit: cover;"
                                     onerror="this.src='/images/menu/default-food.jpg'">
                            }
                            else
                            {
                                <div class="placeholder-image bg-light d-flex align-items-center justify-content-center" style="height: 150px;">
                                    <i class="fas fa-utensils fa-2x text-muted"></i>
                                </div>
                            }
                            <div class="card-body p-3">
                                <h6 class="card-title" id="preview-title">@Model.Name</h6>
                                <p class="card-text text-muted small" id="preview-description">@(Model.Description ?? "Item description will appear here...")</p>
                                <div class="d-flex justify-content-between">
                                    <span class="h6 text-primary" id="preview-price">@Model.Price.ToString("C")</span>
                                    <small class="text-muted" id="preview-category">Category</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="mt-4">
            <div class="d-flex justify-content-between">
                @Html.ActionLink("Cancel", "MenuItems", "Admin", null, new { @class = "btn btn-outline-secondary" })
                <button type="submit" class="btn btn-primary">
                    <i class="fas fa-save"></i> Update Menu Item
                </button>
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Bootstrap validation
        (function() {
            'use strict';
            window.addEventListener('load', function() {
                var forms = document.getElementsByClassName('needs-validation');
                var validation = Array.prototype.filter.call(forms, function(form) {
                    form.addEventListener('submit', function(event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();

        // Live preview
        $('#Name').on('input', function() {
            $('#preview-title').text($(this).val() || '@Model.Name');
        });
        
        $('#Description').on('input', function() {
            $('#preview-description').text($(this).val() || '@(Model.Description ?? "Item description will appear here...")');
        });
        
        $('#Price').on('input', function() {
            var price = $(this).val();
            $('#preview-price').text(price ? '$' + parseFloat(price).toFixed(2) : '@Model.Price.ToString("C")');
        });
        
        $('#CategoryID').on('change', function() {
            var categoryText = $(this).find('option:selected').text();
            $('#preview-category').text(categoryText !== 'Select a category' ? categoryText : 'Category');
        });
    </script>
}