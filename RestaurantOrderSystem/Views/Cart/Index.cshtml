@model RestaurantOrderSystem.Models.ShoppingCart

@{
    ViewBag.Title = "Shopping Cart";
}

<div class="container mt-4">
    <h2><i class="fas fa-shopping-cart"></i> Your Shopping Cart</h2>

    @if (Model.Items.Any())
    {
        <div class="row">
            <div class="col-lg-8">
                <div class="card">
                    <div class="card-body">
                        @using (Html.BeginForm("ClearCart", "Cart", FormMethod.Post))
                        {
                            @Html.AntiForgeryToken()
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="card-title">Cart Items (@Model.Items.Count)</h5>
                                <button type="submit" class="btn btn-outline-danger btn-sm" onclick="return confirm('Are you sure you want to clear your cart?')">
                                    <i class="fas fa-trash"></i> Clear Cart
                                </button>
                            </div>
                        }

                        @foreach (var item in Model.Items)
                        {
                            <div class="row align-items-center border-bottom py-3">
                                <div class="col-md-2">
                                    @if (!string.IsNullOrEmpty(item.ImageUrl))
                                    {
                                        <img src="@item.ImageUrl" alt="@item.Name" class="img-fluid rounded" style="height: 80px; object-fit: cover;">
                                    }
                                    else
                                    {
                                        <div class="bg-light rounded d-flex align-items-center justify-content-center" style="height: 80px;">
                                            <i class="fas fa-utensils text-muted"></i>
                                        </div>
                                    }
                                </div>
                                <div class="col-md-4">
                                    <h6 class="mb-1">@item.Name</h6>
                                    <small class="text-muted price-display">
                                        <span class="rupee-symbol">&#8377;</span>@item.Price.ToString("N0") each
                                    </small>
                                </div>
                                <div class="col-md-3">
                                    <div class="d-flex align-items-center">
                                        @using (Html.BeginForm("UpdateCart", "Cart", FormMethod.Post, new { @class = "quantity-form", id = "form_" + item.ItemID }))
                                        {
                                            @Html.AntiForgeryToken()
                                            @Html.Hidden("itemId", item.ItemID)
                                            <div class="input-group input-group-sm">
                                                <button type="button" class="btn btn-outline-secondary btn-quantity" data-action="decrease" data-item-id="@item.ItemID">
                                                    <i class="fas fa-minus"></i>
                                                </button>
                                                <input type="number" 
                                                       name="quantity" 
                                                       value="@item.Quantity" 
                                                       min="1" 
                                                       max="99" 
                                                       class="form-control text-center quantity-input" 
                                                       id="quantity_@item.ItemID" 
                                                       data-item-id="@item.ItemID"
                                                       style="width: 70px;">
                                                <button type="button" class="btn btn-outline-secondary btn-quantity" data-action="increase" data-item-id="@item.ItemID">
                                                    <i class="fas fa-plus"></i>
                                                </button>
                                            </div>
                                        }
                                    </div>
                                </div>
                                <div class="col-md-2 text-end">
                                    <strong class="price-display">
                                        <span class="rupee-symbol">&#8377;</span>@item.Subtotal.ToString("N0")
                                    </strong>
                                </div>
                                <div class="col-md-1 text-end">
                                    @using (Html.BeginForm("RemoveFromCart", "Cart", FormMethod.Post))
                                    {
                                        @Html.AntiForgeryToken()
                                        @Html.Hidden("itemId", item.ItemID)
                                        <button type="submit" class="btn btn-outline-danger btn-sm" title="Remove item" onclick="return confirm('Are you sure you want to remove this item?')">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="col-lg-4">
                <div class="card">
                    <div class="card-header">
                        <h5>Order Summary</h5>
                    </div>
                    <div class="card-body">
                        <div class="d-flex justify-content-between mb-2">
                            <span>Subtotal:</span>
                            <strong class="price-display">
                                <span class="rupee-symbol">&#8377;</span>@Model.GetTotal().ToString("N0")
                            </strong>
                        </div>
                        <div class="d-flex justify-content-between mb-2">
                            <span>Tax (8%):</span>
                            <span class="price-display">
                                <span class="rupee-symbol">&#8377;</span>@((Model.GetTotal() * 0.08m).ToString("N0"))
                            </span>
                        </div>
                        <hr>
                        <div class="d-flex justify-content-between mb-3">
                            <strong>Total:</strong>
                            <strong class="text-primary price-display">
                                <span class="rupee-symbol">&#8377;</span>@((Model.GetTotal() * 1.08m).ToString("N0"))
                            </strong>
                        </div>
                        
                        <div class="d-grid gap-2">
                            @Html.ActionLink("Proceed to Checkout", "Checkout", "Order", null, new { @class = "btn btn-primary btn-lg" })
                            @Html.ActionLink("Continue Shopping", "Index", "Menu", null, new { @class = "btn btn-outline-secondary" })
                        </div>
                    </div>
                </div>
                
                <div class="card mt-3">
                    <div class="card-body">
                        <h6>Need Help?</h6>
                        <p class="card-text small text-muted">
                            Questions about your order? Contact us at (555) 123-4567 or email support@restaurant.com
                        </p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-shopping-cart fa-4x text-muted mb-4"></i>
            <h4>Your cart is empty</h4>
            <p class="text-muted mb-4">Add some delicious items from our menu to get started!</p>
            @Html.ActionLink("Browse Menu", "Index", "Menu", null, new { @class = "btn btn-primary btn-lg" })
        </div>
    }
</div>

@section Scripts {
    <style>
        .rupee-symbol {
            font-family: Arial, sans-serif;
            font-weight: bold;
        }
        .price-display {
            font-weight: 600;
        }
    </style>
    
    <script>
        // Global variables for better cart management
        var isUpdating = false;

        function increaseQuantity(itemId) {
            if (isUpdating) return;
            
            var quantityInput = document.getElementById('quantity_' + itemId);
            if (!quantityInput) {
                console.error('Quantity input not found for item: ' + itemId);
                return;
            }
            
            var currentValue = parseInt(quantityInput.value) || 0;
            if (currentValue < 99) {
                quantityInput.value = currentValue + 1;
                updateCartImmediate(itemId);
            } else {
                showMessage('Maximum quantity is 99', 'warning');
            }
        }

        function decreaseQuantity(itemId) {
            if (isUpdating) return;
            
            var quantityInput = document.getElementById('quantity_' + itemId);
            if (!quantityInput) {
                console.error('Quantity input not found for item: ' + itemId);
                return;
            }
            
            var currentValue = parseInt(quantityInput.value) || 0;
            if (currentValue > 1) {
                quantityInput.value = currentValue - 1;
                updateCartImmediate(itemId);
            } else {
                // If quantity becomes 0, ask for confirmation to remove
                if (confirm('Remove this item from cart?')) {
                    removeItemFromCart(itemId);
                }
            }
        }

        function updateCart(itemId) {
            if (isUpdating) return;
            updateCartImmediate(itemId);
        }

        function updateCartImmediate(itemId) {
            if (isUpdating) return;
            
            var quantityInput = document.getElementById('quantity_' + itemId);
            if (!quantityInput) return;
            
            var quantity = parseInt(quantityInput.value) || 1;
            
            // Validate quantity
            if (quantity < 1) {
                quantityInput.value = 1;
                quantity = 1;
            }
            if (quantity > 99) {
                quantityInput.value = 99;
                quantity = 99;
                showMessage('Maximum quantity is 99', 'warning');
            }
            
            // Show loading state
            isUpdating = true;
            var form = quantityInput.closest('form');
            if (!form) {
                console.error('Form not found for item: ' + itemId);
                isUpdating = false;
                return;
            }
            
            // Disable all buttons and inputs in this item row
            var itemRow = quantityInput.closest('.row');
            var controls = itemRow.querySelectorAll('button, input[type="number"]');
            controls.forEach(function(control) {
                control.disabled = true;
            });
            
            // Create a temporary form with the correct data
            var tempForm = document.createElement('form');
            tempForm.method = 'POST';
            tempForm.action = '@Url.Action("UpdateCart", "Cart")';
            tempForm.style.display = 'none';
            
            // Add anti-forgery token
            var token = form.querySelector('input[name="__RequestVerificationToken"]');
            if (token) {
                var tokenInput = document.createElement('input');
                tokenInput.type = 'hidden';
                tokenInput.name = '__RequestVerificationToken';
                tokenInput.value = token.value;
                tempForm.appendChild(tokenInput);
            }
            
            // Add itemId
            var itemIdInput = document.createElement('input');
            itemIdInput.type = 'hidden';
            itemIdInput.name = 'itemId';
            itemIdInput.value = itemId;
            tempForm.appendChild(itemIdInput);
            
            // Add quantity
            var quantityHidden = document.createElement('input');
            quantityHidden.type = 'hidden';
            quantityHidden.name = 'quantity';
            quantityHidden.value = quantity;
            tempForm.appendChild(quantityHidden);
            
            // Add form to body and submit
            document.body.appendChild(tempForm);
            tempForm.submit();
        }

        function removeItemFromCart(itemId) {
            if (isUpdating) return;
            
            if (confirm('Are you sure you want to remove this item from cart?')) {
                isUpdating = true;
                
                // Find the remove form for this specific item
                var removeForm = null;
                var hiddenInputs = document.querySelectorAll('input[name="itemId"][value="' + itemId + '"]');
                
                for (var i = 0; i < hiddenInputs.length; i++) {
                    var form = hiddenInputs[i].closest('form');
                    if (form && form.action.includes('RemoveFromCart')) {
                        removeForm = form;
                        break;
                    }
                }
                
                if (removeForm) {
                    removeForm.submit();
                } else {
                    console.error('Remove form not found for item: ' + itemId);
                    isUpdating = false;
                }
            }
        }

        function showMessage(message, type) {
            // Remove any existing alerts first
            var existingAlerts = document.querySelectorAll('.alert.custom-alert');
            existingAlerts.forEach(function(alert) {
                alert.remove();
            });
            
            // Create a temporary alert
            var alertDiv = document.createElement('div');
            alertDiv.className = 'alert alert-' + (type || 'info') + ' alert-dismissible fade show custom-alert';
            alertDiv.innerHTML = '<i class="fas fa-info-circle"></i> ' + message + 
                '<button type="button" class="btn-close" data-bs-dismiss="alert" onclick="this.parentElement.remove()"></button>';
            
            // Insert at the top of the container
            var container = document.querySelector('.container');
            if (container && container.firstChild) {
                container.insertBefore(alertDiv, container.firstChild);
            }
            
            // Auto-remove after 4 seconds
            setTimeout(function() {
                if (alertDiv.parentNode) {
                    alertDiv.remove();
                }
            }, 4000);
        }

        // Real-time cart total updates (if you want AJAX functionality)
        function updateCartTotalsAjax() {
            $.ajax({
                url: '@Url.Action("GetCartTotal", "Cart")',
                type: 'GET',
                dataType: 'json',
                success: function(response) {
                    if (response.success) {
                        // Update cart totals in the UI
                        $('.cart-total').text(response.formattedTotal);
                        $('.cart-count').text(response.itemCount);
                        
                        // Update cart badge in navigation
                        var cartBadge = $('.cart-badge');
                        if (response.itemCount > 0) {
                            cartBadge.text(response.itemCount).show();
                        } else {
                            cartBadge.hide();
                        }
                    }
                },
                error: function(xhr, status, error) {
                    console.log('Failed to update cart totals: ' + error);
                }
            });
        }
        
        $(document).ready(function() {
            // Convert HTML entities to actual rupee symbols
            $('.rupee-symbol').each(function() {
                var $this = $(this);
                if ($this.html() === '&#8377;' || $this.text() === '&#8377;') {
                    $this.html('?');
                }
            });
            
            // Fallback: if still showing question marks, replace with Rs.
            $('.price-display').each(function() {
                var $this = $(this);
                var text = $this.text();
                if (text.includes('?')) {
                    var newText = text.replace(/\?/g, 'Rs. ');
                    $this.html(newText);
                }
            });

            // Add loading states to forms
            $('form').on('submit', function() {
                var $form = $(this);
                var $submitBtn = $form.find('button[type="submit"]');
                
                if ($submitBtn.length > 0) {
                    // Disable submit button and show loading
                    $submitBtn.prop('disabled', true);
                    var originalText = $submitBtn.html();
                    $submitBtn.html('<i class="fas fa-spinner fa-spin"></i> Processing...');
                    
                    // Re-enable after a delay (in case of errors)
                    setTimeout(function() {
                        $submitBtn.prop('disabled', false).html(originalText);
                    }, 5000);
                }
            });

            // Enhanced quantity input validation
            $('input[type="number"]').on('input', function() {
                var $input = $(this);
                var value = parseInt($input.val()) || 1;
                var min = parseInt($input.attr('min')) || 1;
                var max = parseInt($input.attr('max')) || 99;
                
                if (value < min) {
                    $input.val(min);
                } else if (value > max) {
                    $input.val(max);
                    showMessage('Maximum quantity is ' + max, 'warning');
                }
            });

            // Handle direct input changes
            $('input[type="number"]').on('change', function() {
                var $input = $(this);
                var itemId = $input.attr('id').replace('quantity_', '');
                if (itemId && !isUpdating) {
                    updateCartImmediate(parseInt(itemId));
                }
            });

            // Keyboard shortcuts
            $(document).on('keydown', function(e) {
                // ESC key to clear any loading states
                if (e.key === 'Escape') {
                    isUpdating = false;
                    $('button').prop('disabled', false);
                    $('input').prop('disabled', false);
                }
            });

            // Reset updating flag on page load completion
            setTimeout(function() {
                isUpdating = false;
                $('button').prop('disabled', false);
                $('input').prop('disabled', false);
            }, 1000);
        });
        
        // Use event delegation for better reliability
        $(document).on('click', '.btn-quantity', function(e) {
            e.preventDefault();
            
            if (isUpdating) return false;
            
            var $btn = $(this);
            var action = $btn.data('action');
            var itemId = $btn.data('item-id');
            var $quantityInput = $('#quantity_' + itemId);
            
            if (!$quantityInput.length) {
                console.error('Quantity input not found for item: ' + itemId);
                return false;
            }
            
            var currentValue = parseInt($quantityInput.val()) || 1;
            var newValue = currentValue;
            
            if (action === 'increase') {
                if (currentValue < 99) {
                    newValue = currentValue + 1;
                    $quantityInput.val(newValue);
                    updateCartImmediate(itemId);
                } else {
                    showMessage('Maximum quantity is 99', 'warning');
                }
            } else if (action === 'decrease') {
                if (currentValue > 1) {
                    newValue = currentValue - 1;
                    $quantityInput.val(newValue);
                    updateCartImmediate(itemId);
                } else {
                    if (confirm('Remove this item from cart?')) {
                        removeItemFromCart(itemId);
                    }
                }
            }
            
            return false;
        });
    </script>
}