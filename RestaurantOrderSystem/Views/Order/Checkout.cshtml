@model RestaurantOrderSystem.Models.ViewModels.CheckoutViewModel

@{
    ViewBag.Title = "Checkout";
}

<div class="container mt-4">
    <div class="row">
        <div class="col-lg-8">
            <h2><i class="fas fa-credit-card"></i> Checkout</h2>
            
            @using (Html.BeginForm("Checkout", "Order", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate" }))
            {
                @Html.AntiForgeryToken()
                
                <div class="card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-user"></i> Customer Information</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(model => model.CustomerName, new { @class = "form-label" })
                                @Html.TextBoxFor(model => model.CustomerName, new { @class = "form-control", required = "required" })
                                @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "invalid-feedback" })
                            </div>
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(model => model.CustomerEmail, new { @class = "form-label" })
                                @Html.TextBoxFor(model => model.CustomerEmail, new { @class = "form-control", @type = "email", required = "required" })
                                @Html.ValidationMessageFor(model => model.CustomerEmail, "", new { @class = "invalid-feedback" })
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                @Html.LabelFor(model => model.CustomerPhone, new { @class = "form-label" })
                                @Html.TextBoxFor(model => model.CustomerPhone, new { @class = "form-control", @type = "tel", required = "required" })
                                @Html.ValidationMessageFor(model => model.CustomerPhone, "", new { @class = "invalid-feedback" })
                            </div>
                        </div>
                        <div class="mb-3">
                            @Html.LabelFor(model => model.SpecialInstructions, new { @class = "form-label" })
                            @Html.TextAreaFor(model => model.SpecialInstructions, new { @class = "form-control", @rows = "3", @placeholder = "Any special requests or dietary restrictions..." })
                            @Html.ValidationMessageFor(model => model.SpecialInstructions, "", new { @class = "invalid-feedback" })
                        </div>
                    </div>
                </div>

                <div class="d-grid gap-2 d-md-flex justify-content-md-between">
                    @Html.ActionLink("Back to Cart", "Index", "Cart", null, new { @class = "btn btn-outline-secondary" })
                    <button type="submit" class="btn btn-success btn-lg">
                        <i class="fas fa-check"></i> Place Order
                    </button>
                </div>
            }
        </div>

        <div class="col-lg-4">
            <div class="card position-sticky" style="top: 20px;">
                <div class="card-header">
                    <h5><i class="fas fa-receipt"></i> Order Summary</h5>
                </div>
                <div class="card-body">
                    @foreach (var item in Model.Cart.Items)
                    {
                        <div class="d-flex justify-content-between align-items-center mb-2">
                            <div>
                                <h6 class="mb-0">@item.Name</h6>
                                <small class="text-muted price-display">
                                    @item.Quantity x <span class="rupee-symbol">&#8377;</span>@item.Price.ToString("N0")
                                </small>
                            </div>
                            <span class="price-display">
                                <span class="rupee-symbol">&#8377;</span>@item.Subtotal.ToString("N0")
                            </span>
                        </div>
                    }
                    <hr>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Subtotal (@Model.Cart.GetItemCount() items)</span>
                        <span class="price-display">
                            <span class="rupee-symbol">&#8377;</span>@Model.Cart.GetTotal().ToString("N0")
                        </span>
                    </div>
                    <div class="d-flex justify-content-between mb-2">
                        <span>Tax (8%)</span>
                        <span class="price-display">
                            <span class="rupee-symbol">&#8377;</span>@((Model.Cart.GetTotal() * 0.08m).ToString("N0"))
                        </span>
                    </div>
                    <hr>
                    <div class="d-flex justify-content-between">
                        <strong>Total</strong>
                        <strong class="price-display">
                            <span class="rupee-symbol">&#8377;</span>@((Model.Cart.GetTotal() * 1.08m).ToString("N0"))
                        </strong>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <style>
        .rupee-symbol {
            font-family: Arial, sans-serif;
            font-weight: bold;
        }
        .price-display {
            font-weight: 600;
        }
    </style>
    
    <script>
        // Bootstrap validation
        (function() {
            'use strict';
            window.addEventListener('load', function() {
                var forms = document.getElementsByClassName('needs-validation');
                var validation = Array.prototype.filter.call(forms, function(form) {
                    form.addEventListener('submit', function(event) {
                        if (form.checkValidity() === false) {
                            event.preventDefault();
                            event.stopPropagation();
                        }
                        form.classList.add('was-validated');
                    }, false);
                });
            }, false);
        })();
        
        $(document).ready(function() {
            // Convert HTML entities to actual rupee symbols
            $('.rupee-symbol').each(function() {
                if ($(this).text() === '&#8377;') {
                    $(this).html('?');
                }
            });
            
            // Fallback: if still showing question marks, replace with Rs.
            $('.price-display').each(function() {
                var text = $(this).text();
                if (text.includes('?')) {
                    $(this).html(text.replace('?', '<strong>Rs.</strong> '));
                }
            });
        });
    </script>
}